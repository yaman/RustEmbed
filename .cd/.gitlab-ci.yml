image: python:3.11

default:
  tags:
    - "personalization-runner"

stages:
  - build
  - test
  - package
  - security
  - create-phoenix
  - deploy-phoenix
  - performance
  - destroy-phoenix
  - prepare-artifacts-prod
  - deploy-prod

include:
  - project: modanisatech/gitlab-ci-templates
    ref: master
    file:
      - "docker/build-and-push.yml"
      - "docker/dind-service.yml"
      - "security/trivy-base-container-scanner.yaml"
      - "security/trivy-container-scanner.yaml"

variables:
  GKE_CLUSTER_NAME: personalization-utility
  GCLOUD_CLUSTER_REGION: europe-west1
  GCLOUD_PROJECT_NAME: mdns-personalization-utility
  APP_NAME: ${CI_PROJECT_NAME}
  NAMESPACE: ${CI_PROJECT_NAME}
  HELM_RELEASE_NAME: ${CI_PROJECT_NAME}
    
.gke-login:
  before_script:
    - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
    - echo ${K8S_SERVICEACCOUNT_UTILITY} | base64 -d > /tmp/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file /tmp/gcloud-service-key.json
    - gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GCLOUD_CLUSTER_REGION --project $GCLOUD_PROJECT_NAME

cargo-install:
  image: rust:latest
  stage: build
  tags:
    - "personalization-runner"
  script:
    - apt update && apt install protobuf-compiler -y
    - cargo install --path .
    - mv /usr/local/cargo/bin/embed-rs $CI_PROJECT_DIR/target/embed-rs
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: on_success
  artifacts:
    paths:
      - $CI_PROJECT_DIR/target

install-models:
  stage: build
  tags:
    - "personalization-runner"
  script:
    - python -m pip install --upgrade-strategy eager optimum[onnxruntime]
    - curl -sSL https://install.python-poetry.org | POETRY_HOME=/etc/poetry python3 -
    - export PATH="/etc/poetry/bin:$PATH"
    - poetry install
    - poetry run convert_text_model
    - poetry run convert_image_model
    - echo $CI_JOB_ID > $CI_PROJECT_DIR/models/models_artifact_id
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: on_success
  artifacts:
    paths:
      - $CI_PROJECT_DIR/models

package:
  stage: package
  tags:
    - "personalization-runner"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - when: on_success

unit-test:
  image: rust:latest
  stage: test
  script:
    - apt update && apt install protobuf-compiler -y
    - export ORT_DYLIB_PATH="./target/release/libonnxruntime.so"
    - ./target/embed-rs &
    - cargo test
  allow_failure: true

base-container-security:
  stage: security
  extends:
    - .trivy-base-container-security
    - .dind-service-19
  variables:
    TRIVY_SEVERITY: "HIGH,CRITICAL"
    TRIVY_USERNAME: ""
    TRIVY_PASSWORD: ""
    BASE_IMAGE: 'ubuntu:latest'
  rules:
    - when: on_success
  dependencies: []

container-security:
  stage: security
  extends:
    - .trivy-container-security
  variables:
    TRIVY_SEVERITY: "HIGH,CRITICAL"
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE/${CI_COMMIT_REF_SLUG}:${CI_PIPELINE_ID}
    EXTRA_PARAMETERS: "--ignore-unfixed"
  rules:
    - when: on_success
  dependencies: []

create-phoenix-cluster:
  stage: create-phoenix
  image: registry.gitlab.com/modanisatech/docker-images/helm3-gcp-kubectl-terragrunt/master
  extends:
    - .gke-login
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud-service-key.json
    TERRAGRUNT_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/terragrunt.git
  script:
    - cd ${HOME} && git clone $TERRAGRUNT_REPOSITORY && cd terragrunt/gcp/personalization/europe-west-1/phoenix/gke
    - terragrunt apply -auto-approve --terragrunt-non-interactive
  dependencies: []

deploy-apps:phoenix:
  stage: deploy-phoenix
  image: registry.gitlab.com/modanisatech/docker-images/helm3-gcp-kubectl-terragrunt/master
  extends:
    - .gke-login
  variables:
      GKE_CLUSTER_NAME: personalization-phoenix
      GITOPS_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/gitops.git
  script:
    #- cd ${HOME} && git clone $GITOPS_REPOSITORY && cd gitops/phoenix
    #- ./deploy.sh
    # Not necessary for now
    - echo "Infra apps deployed"
  needs:
    - create-phoenix-cluster
  dependencies: []

deploy-embed:phoenix:
  stage: deploy-phoenix
  image: registry.gitlab.com/modanisatech/docker-images/helm3-gcp-kubectl-terragrunt/master
  extends:
    - .gke-login
  variables:
      GKE_CLUSTER_NAME: personalization-phoenix
      ARTIFACT_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/deployment-artifacts.git
  script:
    - cd ${HOME} && git clone $ARTIFACT_REPOSITORY
    - kubectl apply -n embed-rs -f ./deployment-artifacts/embed-rs/phoenix/namespace.yaml
    - kubectl apply -n embed-rs -f $CI_PROJECT_DIR/.cd/helm-values/phoenix/service.yaml
    - kubectl apply -n embed-rs -f ./deployment-artifacts/embed-rs/phoenix/
    - |
      export SERVICE_NAME=embed-rs-external
      while [[ -z $(kubectl get service $SERVICE_NAME -n embed-rs -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]]; do
          echo "Waiting for external IP..."
          sleep 5
      done
      echo "External IP obtained: $(kubectl get service $SERVICE_NAME -n embed-rs -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
  needs:
    - prepare-artifacts:phoenix
    - deploy-apps:phoenix
  dependencies: []

prepare-artifacts:phoenix:
  stage: deploy-phoenix
  image: registry.gitlab.com/modanisatech/docker-images/helm3-alpine/master:latest
  variables:
    ARTIFACT_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/deployment-artifacts.git
    HELM_TEMPLATE_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/helm-charts.git
    GENERIC_HELM_PATH: "/tmp/helm-charts/generic-template-gcp"
    HELM_PATH: ".cd"
    HELM_CHART_NAME: "generic-template"
    CHART_VERSION: master
    SEALED_SECRETS_ENABLED: "false"
    DEPLOY_ENV: phoenix
  before_script:
    - export LB_ENDPOINT=${LB_ENDPOINT_PHOENIX}
    - export LB_INTERNAL_ENDPOINT=${LB_INTERNAL_ENDPOINT_PHOENIX}
  script:
    - export MODELS_ARTIFACT_ID=$(cat $CI_PROJECT_DIR/models/models_artifact_id)
    - mkdir -p /tmp/manifests
    - git clone -b $CHART_VERSION $HELM_TEMPLATE_REPOSITORY /tmp/helm-charts
    - envsubst < $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml > new-values.yaml
    - mv new-values.yaml $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml
    - helm template $HELM_RELEASE_NAME $GENERIC_HELM_PATH --namespace $NAMESPACE --set RELEASE_NAME="$CI_COMMIT_REF_NAME" --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="${CI_PIPELINE_ID}" --set dockerconfigjson='\{\"auths\":{\"registry.gitlab.com\":{\"auth\":\"'${PERSONALIZATION_REGISTRY_AUTH_TOKEN}'\"}}}\' --values $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml --output-dir /tmp/manifests $HELM_EXTRA_PARAMETERS
    - rm /tmp/manifests/$HELM_CHART_NAME/templates/secret-generator.yaml
    - git clone $ARTIFACT_REPOSITORY ~/deployment-artifacts
    - git config --global user.email "admin@modanisa.com"
    - git config --global user.name "GitLab CI/CD"
    - cd ~/deployment-artifacts
    - git checkout -B master
    - rm -rf ./$APP_NAME/$DEPLOY_ENV && mkdir -p ./$APP_NAME/$DEPLOY_ENV
    - cp -r /tmp/manifests/$HELM_CHART_NAME/templates/* ./$APP_NAME/$DEPLOY_ENV/
    - git add . -A
    - git commit -m "[gitlab-ci] $APP_NAME $DEPLOY_ENV image update to tag ${CI_PIPELINE_ID}"
    - git pull --rebase
    - git push origin master
  dependencies:
    - install-models

cargo-performance:
  stage: performance
  image: obvionaoe/ghz:latest
  parallel: 5
  script:
    - /go/bin/ghz --insecure --enable-compression --proto ./pb/encoder/encoder.proto --call encoder.Encoder.EncodeText -d '{"texts":"{randomString 16 }"}' -c 10 -z 20m --load-schedule=step --load-start=50 --load-end=300 --load-step=10 --load-step-duration=10s --connections=10 --lb-strategy "round_robin" 10.169.128.15:50052
  artifacts:
    when: always
    paths:
      - report.html
  rules:
    - when: on_success
  dependencies: []

destroy-phoenix:
  stage: destroy-phoenix
  image: registry.gitlab.com/modanisatech/docker-images/helm3-gcp-kubectl-terragrunt/master
  extends:
    - .gke-login
  variables:
    GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcloud-service-key.json
    TERRAGRUNT_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/terragrunt.git
  script:
    - cd ${HOME} && git clone $TERRAGRUNT_REPOSITORY && cd terragrunt/gcp/personalization/europe-west-1/phoenix/gke
    - terragrunt destroy -auto-approve --terragrunt-non-interactive
  when: always
  dependencies: []

prepare-artifacts:prod:
  stage: prepare-artifacts-prod
  image: registry.gitlab.com/modanisatech/docker-images/helm3-alpine/master:latest
  variables:
    ARTIFACT_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/sherlock/personalization/deployment-artifacts.git
    HELM_TEMPLATE_REPOSITORY: https://${CI_USERNAME}:${CI_PUSH_TOKEN}@gitlab.com/modanisatech/helm-charts.git
    GENERIC_HELM_PATH: "/tmp/helm-charts/generic-template-gcp"
    HELM_PATH: ".cd"
    HELM_CHART_NAME: "generic-template"
    CHART_VERSION: master
    SEALED_SECRETS_ENABLED: "false"
    DEPLOY_ENV: prod
  before_script:
    - export LB_ENDPOINT=${LB_ENDPOINT_PROD}
    - export LB_INTERNAL_ENDPOINT=${LB_INTERNAL_ENDPOINT_PROD}
  script:
    - export MODELS_ARTIFACT_ID=$(cat $CI_PROJECT_DIR/models/models_artifact_id)
    - mkdir -p /tmp/manifests
    - git clone -b $CHART_VERSION $HELM_TEMPLATE_REPOSITORY /tmp/helm-charts
    - envsubst < $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml > new-values.yaml
    - mv new-values.yaml $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml
    - helm template $HELM_RELEASE_NAME $GENERIC_HELM_PATH --namespace $NAMESPACE --set RELEASE_NAME="$CI_COMMIT_REF_NAME" --set image.repository="$CI_REGISTRY_IMAGE" --set image.tag="${CI_PIPELINE_ID}" --set dockerconfigjson='\{\"auths\":{\"registry.gitlab.com\":{\"auth\":\"'${PERSONALIZATION_REGISTRY_AUTH_TOKEN}'\"}}}\' --values $HELM_PATH/helm-values/$DEPLOY_ENV/values.yaml --output-dir /tmp/manifests $HELM_EXTRA_PARAMETERS
    - rm /tmp/manifests/$HELM_CHART_NAME/templates/secret-generator.yaml
    - git clone $ARTIFACT_REPOSITORY ~/deployment-artifacts
    - git config --global user.email "admin@modanisa.com"
    - git config --global user.name "GitLab CI/CD"
    - cd ~/deployment-artifacts
    - git checkout -B master
    - rm -rf ./$APP_NAME/$DEPLOY_ENV && mkdir -p ./$APP_NAME/$DEPLOY_ENV
    - cp -r /tmp/manifests/$HELM_CHART_NAME/templates/* ./$APP_NAME/$DEPLOY_ENV/
    - git add . -A
    - git commit -m "[gitlab-ci] $APP_NAME $DEPLOY_ENV image update to tag ${CI_PIPELINE_ID}"
    - git pull --rebase
    - git push origin master
  dependencies:
    - install-models

deploy:prod:
  stage: deploy-prod
  extends:
   - .gke-login
  image: registry.gitlab.com/modanisatech/docker-images/gcloud-helm-argocd-awscli/master:latest
  variables:
    ENV_NAME: prod
    CLUSTER_URL: ${CLUSTER_URL_PROD}
    ARGOCD_APP_NAME: "prod-${CI_PROJECT_NAME}"
    FILE: ".cd/argocd.yaml"
  script:
    - envsubst < $FILE > new-argocd.yaml
    - cat new-argocd.yaml
    - kubectl apply -f new-argocd.yaml
    - echo "y" | argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure --plaintext
    - argocd app sync $ARGOCD_APP_NAME && argocd app wait $ARGOCD_APP_NAME --health
  dependencies: []