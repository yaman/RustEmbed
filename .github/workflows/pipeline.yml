name: Fashion-clip-rs

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  download_models:
    runs-on: self-hosted
    container:
      image: yaman/optimum-onnx:latest
    steps:
    - uses: actions/checkout@v3
    - name: Notify Discord
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        details: '${{ github.job }} started...'
        color: '#ff00aa'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    - name: download models
      run: |
        optimum-cli export onnx -m sentence-transformers/clip-ViT-B-32-multilingual-v1 --task feature-extraction models/textqq
        optimum-cli export onnx -m patrickjohncyh/fashion-clip --task feature-extraction models/image
    
    - name: Cache models directory
      uses: actions/cache@v2
      with:
        path: models
        key: ${{ runner.os }}-models-${{ hashFiles('**/pyproject.toml') }}
    - name: Notify Discord
      if: always()
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: ${{ job.status == 'success' && 'info' || 'error' }}
        details: '${{ github.job }} completed with status ${{ job.status }}'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

  build:
    runs-on: ubuntu-latest
    outputs:
      skip_job: ${{ steps.check_files.outputs.skip_job }}
    steps:
    - uses: actions/checkout@v3
    - name: Notify Discord
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        color: '#ff00aa'
        details: '${{ github.job }} started...'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    - name: Check for changes in relevant files
      id: check_files
      run: |
        if ! git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '^(src/|tests/|pb/|Dockerfile|config.toml|Cargo.toml)'; then
          echo "No changes in relevant files. Skipping job."
          echo "::set-output name=skip_job::true"
        fi
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    - name: install cargo binstall
      run: |
        curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: install just
      run: cargo binstall just --locked -y

    - name: Cache just command
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-just-${{ hashFiles('**/justfile') }}

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: sccache environment for rust
      run: |
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

    - name: Build
      run: just build

    - name: Cache target directory
      uses: actions/cache@v2
      with:
        path: ./target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    - name: Notify Discord
      if: always()
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: ${{ job.status == 'success' && 'info' || 'error' }}
        details: '${{ github.job }} completed with status ${{ job.status }}'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

  test:
    needs: [build, download_models]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Notify Discord
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        color: '#ff00aa'
        details: '${{ github.job }} started...'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Restore models directory
      uses: actions/cache@v2
      with:
        path: models
        key: ${{ runner.os }}-models-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-models-

    - name: Restore just command
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-just-${{ hashFiles('**/justfile') }}
        restore-keys: |
          ${{ runner.os }}-just-

    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler

    - name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.3

    - name: sccache environment for rust
      run: |
        echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
        echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

    - name: Run tests
      run: ~/.cargo/bin/just unit-test
    - name: Notify Discord
      if: always()
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: ${{ job.status == 'success' && 'info' || 'error' }}
        details: '${{ github.job }} completed with status ${{ job.status }}'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

  container_push:
    needs: [test,build]
    runs-on: ubuntu-latest
    if: needs.build.outputs.skip_job != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Notify Discord
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        color: '#ff00aa'
        details: '${{ github.job }} started...'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.GH_WORKFLOW_TOKEN }}

    - name: Restore target directory
      uses: actions/cache@v2
      with:
        path: ./target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build and push
      uses: docker/build-push-action@v5.1.0
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          yaman/fashion-clip-rs:latest
          yaman/fashion-clip-rs:${{ github.run_number }}
    - name: Notify Discord
      if: always()
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: ${{ job.status == 'success' && 'info' || 'error' }}
        details: '${{ github.job }} completed with status ${{ job.status }}'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}

  publish2crates_io:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: needs.build.outputs.skip_job != 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Notify Discord
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: info
        color: '#ff00aa'
        details: '${{ github.job }} started...'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    - name: install cargo binstall
      run: |
        curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    - name: install cargo release
      run: cargo binstall cargo-release --locked -y

    - name: Restore target directory
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Publish to crates.io
      run: |
        cargo login ${{ secrets.CRATES_IO_TOKEN }}
        git config --global user.email "abdulkadiryaman@gmail.com"
        git config --global user.name "yaman"
        cargo release patch --execute

    - name: Notify Discord
      if: always()
      uses: rjstone/discord-webhook-notify@v1
      with:
        severity: ${{ job.status == 'success' && 'info' || 'error' }}
        details: '${{ github.job }} completed with status ${{ job.status }}'
        webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}
      