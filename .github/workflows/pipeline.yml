name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  download_models:
    runs-on: ubuntu-latest
    container:
      image: yaman/optimum-onnx:latest

    steps:
    - uses: actions/checkout@v3
    - name: download models
      run: |
        optimum-cli export onnx -m sentence-transformers/clip-ViT-B-32-multilingual-v1 --task feature-extraction models/textqq
        optimum-cli export onnx -m patrickjohncyh/fashion-clip --task feature-extraction models/image
    
    - name: Cache models directory
      uses: actions/cache@v2
      with:
        path: models
        key: ${{ runner.os }}-models-${{ hashFiles('**/pyproject.toml') }}

  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    
    - name: install just
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to ~/.cargo/bin
    - name: Cache just command
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-just-${{ hashFiles('**/justfile') }}
    - name: Cache target directory
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: ~/.cargo/bin/just build

  test:
    needs: [build, download_models]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: Restore target directory
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    - name: Restore models directory
      uses: actions/cache@v2
      with:
        path: models
        key: ${{ runner.os }}-models-${{ hashFiles('**/pyproject.toml') }}
    - name: Restore just command
      uses: actions/cache@v2
      with:
        path: ~/.cargo/bin
        key: ${{ runner.os }}-just-${{ hashFiles('**/justfile') }}
    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    - name: Run tests
      run: ~/.cargo/bin/just unit-test

  container_push:
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.GH_WORKFLOW_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5.1.0
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: yaman/fashion-clip-rs:latest

  publish2crates_io:
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - name: install protoc
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
    - name: install cargo release
      run: cargo install cargo-release

    - name: Restore target directory
      uses: actions/cache@v2
      with:
        path: target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io dry run
      run: |
        cargo login ${{ secrets.CRATES_IO_TOKEN }}
        git config --global user.email "abdulkadiryaman@gmail.com"
        git config --global user.name "yaman"
        yes | cargo release patch --execute


 
